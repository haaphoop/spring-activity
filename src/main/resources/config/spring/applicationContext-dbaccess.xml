<?xml version="1.0" encoding="UTF-8"?>
<beans  xmlns="http://www.springframework.org/schema/beans" 
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
		xmlns:context="http://www.springframework.org/schema/context"
        xmlns:tx="http://www.springframework.org/schema/tx"
		xsi:schemaLocation="
  		http://www.springframework.org/schema/beans
  		http://www.springframework.org/schema/beans/spring-beans.xsd
  		http://www.springframework.org/schema/context
  		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx  
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd"
	    default-autowire="byName">
	         
    <!-- JNDI DataSource for J2EE environments -->
<!--     <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass"><value>${jdbc.driverClassName}</value></property>
		<property name="jdbcUrl"><value>${jdbc.url}</value></property>
		<property name="user"><value>${jdbc.username}</value></property>
		<property name="password"><value>${jdbc.password}</value></property>
		<property name="acquireIncrement"><value>3</value></property>
        <property name="idleConnectionTestPeriod"><value>3600</value></property>
        <property name="checkoutTimeout"><value>3600</value></property>
        <property name="maxPoolSize"><value>40</value></property>
        <property name="minPoolSize"><value>5</value></property>
        <property name="maxStatements"><value>0</value></property>
        <property name="initialPoolSize"><value>10</value></property>
        <property name="maxIdleTime"><value>3600</value></property>
	</bean> -->
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
         <property name="url" value="${jdbc.url}" />
         <property name="username" value="${jdbc.username}" />
         <property name="password" value="${jdbc.password}" />
         <!-- 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：
监控统计用的filter:stat 日志用的filter:log4j 防御sql注入的filter:wall -->
         <property name="filters" value="stat" />
         <property name="maxActive" value="20" />
         <property name="initialSize" value="1" />
         <property name="maxWait" value="60000" />
         <property name="minIdle" value="1" />
         <property name="timeBetweenEvictionRunsMillis" value="60000" />
         <property name="minEvictableIdleTimeMillis" value="300000" />
         <property name="testWhileIdle" value="true" />
         <property name="testOnBorrow" value="false" />
         <property name="testOnReturn" value="false" />
         <property name="poolPreparedStatements" value="true" />
         <property name="maxOpenPreparedStatements" value="20" />
     </bean>
     
     <!-- spring和MyBatis完美整合 -->  
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">  
        <!-- 指定数据源 -->  
        <property name="dataSource"><ref local="dataSource"/></property>
        <!-- 具体指定xml文件，可不配 -->  
        <property name="configLocation" value="classpath:config/mybatis/mybatis-config.xml"></property>
        <!-- 自动扫描mapping.xml文件，**表示迭代查找 ,,也可在mybatis-config.xml中单独指定xml文件 -->  
        <property name="mapperLocations" value="classpath:com/itech/ups/app/**/sqlmaps/*.xml"></property>
    </bean>  
    
    <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">  
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
	
	<!-- 配置iBatis的sqlMapClient -->
    <!-- <bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
        <property name="dataSource"><ref bean="dataSource"/></property>
        <property name="configLocation" value="classpath:config/ibatis/ibatis-config.xml"></property>
    </bean> -->

    <!-- 根据sqlMapClien获取一个SqlMapClient模版 -->
    <!-- <bean id="sqlMapClientTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
        <property name="sqlMapClient" ref="sqlMapClient"/>
    </bean>  -->
   
    <!-- 配置JDBC的jdbcTemplate -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean> 
	
	<!-- Transaction manager for a single JDBC DataSource -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	 <!-- enable the configuration of transactional behavior based on annotations -->
	 <tx:annotation-driven transaction-manager="transactionManager"/>
</beans>
